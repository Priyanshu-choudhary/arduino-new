
/tmp/arduino_build_571910/SignalConverter.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_11>
  30:	0c 94 33 01 	jmp	0x266	; 0x266 <__vector_12>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__vector_16>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	64 01       	movw	r12, r8
  6a:	6d 01       	movw	r12, r26
  6c:	76 01       	movw	r14, r12
  6e:	7f 01       	movw	r14, r30
  70:	88 01       	movw	r16, r16
  72:	91 01       	movw	r18, r2
  74:	91 01       	movw	r18, r2

00000076 <__trampolines_end>:
__trampolines_start():
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	25 00       	.word	0x0025	; ????
  7c:	28 00       	.word	0x0028	; ????
  7e:	2b 00       	.word	0x002b	; ????

00000080 <port_to_mode_PGM>:
  80:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000008a <port_to_input_PGM>:
  8a:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000094 <digital_pin_to_port_PGM>:
  94:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a4:	03 03 03 03 02 02 03                                .......

000000ab <digital_pin_to_bit_mask_PGM>:
  ab:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  bb:	04 08 10 20 40 80 40                                ... @.@

000000c2 <__ctors_end>:
__dtors_end():
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
__do_copy_data():
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	e6 ea       	ldi	r30, 0xA6	; 166
  d6:	f5 e0       	ldi	r31, 0x05	; 5
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	a4 30       	cpi	r26, 0x04	; 4
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
__do_clear_bss():
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	a4 e0       	ldi	r26, 0x04	; 4
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	a5 32       	cpi	r26, 0x25	; 37
  f0:	b2 07       	cpc	r27, r18
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
.do_clear_bss_start():
  f4:	0e 94 0f 02 	call	0x41e	; 0x41e <main>
  f8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <_exit>

000000fc <__bad_interrupt>:
__vector_22():
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <pinMode>:
pinMode():
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	fc 01       	movw	r30, r24
 108:	e5 55       	subi	r30, 0x55	; 85
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	24 91       	lpm	r18, Z
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
 10e:	fc 01       	movw	r30, r24
 110:	ec 56       	subi	r30, 0x6C	; 108
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	84 91       	lpm	r24, Z
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
 116:	88 23       	and	r24, r24
 118:	61 f1       	breq	.+88     	; 0x172 <pinMode+0x72>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	fc 01       	movw	r30, r24
 122:	e0 58       	subi	r30, 0x80	; 128
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	c5 91       	lpm	r28, Z+
 128:	d4 91       	lpm	r29, Z
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
 12a:	fc 01       	movw	r30, r24
 12c:	ea 58       	subi	r30, 0x8A	; 138
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	a5 91       	lpm	r26, Z+
 132:	b4 91       	lpm	r27, Z
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
 134:	61 11       	cpse	r22, r1
 136:	09 c0       	rjmp	.+18     	; 0x14a <pinMode+0x4a>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
 138:	9f b7       	in	r25, 0x3f	; 63
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
 13a:	f8 94       	cli
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
 13c:	88 81       	ld	r24, Y
 13e:	20 95       	com	r18
 140:	82 23       	and	r24, r18
 142:	88 83       	st	Y, r24
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
 144:	ec 91       	ld	r30, X
 146:	2e 23       	and	r18, r30
 148:	0b c0       	rjmp	.+22     	; 0x160 <pinMode+0x60>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:47
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
 14a:	62 30       	cpi	r22, 0x02	; 2
 14c:	61 f4       	brne	.+24     	; 0x166 <pinMode+0x66>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
 14e:	9f b7       	in	r25, 0x3f	; 63
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
 150:	f8 94       	cli
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
 152:	88 81       	ld	r24, Y
 154:	32 2f       	mov	r19, r18
 156:	30 95       	com	r19
 158:	83 23       	and	r24, r19
 15a:	88 83       	st	Y, r24
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
 15c:	ec 91       	ld	r30, X
 15e:	2e 2b       	or	r18, r30
 160:	2c 93       	st	X, r18
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
 162:	9f bf       	out	0x3f, r25	; 63
 164:	06 c0       	rjmp	.+12     	; 0x172 <pinMode+0x72>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:54
  } else {
    uint8_t oldSREG = SREG;
 166:	8f b7       	in	r24, 0x3f	; 63
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
 168:	f8 94       	cli
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
 16a:	e8 81       	ld	r30, Y
 16c:	2e 2b       	or	r18, r30
 16e:	28 83       	st	Y, r18
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
 170:	8f bf       	out	0x3f, r24	; 63
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:59
  }
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <pulseIn.constprop.0>:
pulseIn.constprop.0():
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_pulse.c:33
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_pulse.c:38
{
  // cache the port and bit of the pin in order to speed up the
  // pulse width measuring loop and achieve finer resolution.  calling
  // digitalRead() instead yields much coarser resolution.
  uint8_t bit = digitalPinToBitMask(pin);
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	fc 01       	movw	r30, r24
 180:	e5 55       	subi	r30, 0x55	; 85
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	64 91       	lpm	r22, Z
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_pulse.c:39
  uint8_t port = digitalPinToPort(pin);
 186:	fc 01       	movw	r30, r24
 188:	ec 56       	subi	r30, 0x6C	; 108
 18a:	ff 4f       	sbci	r31, 0xFF	; 255
 18c:	e4 91       	lpm	r30, Z
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_pulse.c:46

  // convert the timeout from microseconds to a number of times through
  // the initial loop; it takes approximately 16 clock cycles per iteration
  unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

  unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	e6 57       	subi	r30, 0x76	; 118
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	85 91       	lpm	r24, Z+
 19a:	94 91       	lpm	r25, Z
 19c:	00 e4       	ldi	r16, 0x40	; 64
 19e:	12 e4       	ldi	r17, 0x42	; 66
 1a0:	2f e0       	ldi	r18, 0x0F	; 15
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	46 2f       	mov	r20, r22
 1a6:	0e 94 ca 01 	call	0x394	; 0x394 <countPulseASM>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_pulse.c:49

  // prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
  if (width)
 1aa:	61 15       	cp	r22, r1
 1ac:	71 05       	cpc	r23, r1
 1ae:	81 05       	cpc	r24, r1
 1b0:	91 05       	cpc	r25, r1
 1b2:	49 f0       	breq	.+18     	; 0x1c6 <pulseIn.constprop.0+0x4e>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_pulse.c:50
    return clockCyclesToMicroseconds(width * 16 + 16);
 1b4:	dc 01       	movw	r26, r24
 1b6:	cb 01       	movw	r24, r22
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	a1 1d       	adc	r26, r1
 1bc:	b1 1d       	adc	r27, r1
 1be:	bc 01       	movw	r22, r24
 1c0:	cd 01       	movw	r24, r26
 1c2:	9f 70       	andi	r25, 0x0F	; 15
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <pulseIn.constprop.0+0x54>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_pulse.c:52
  else
    return 0;
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	cb 01       	movw	r24, r22
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_pulse.c:53
}
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	08 95       	ret

000001d2 <__vector_16>:
__vector_16():
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	8f 93       	push	r24
 1e2:	9f 93       	push	r25
 1e4:	af 93       	push	r26
 1e6:	bf 93       	push	r27
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
 1e8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <timer0_millis>
 1ec:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <timer0_millis+0x1>
 1f0:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <timer0_millis+0x2>
 1f4:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <timer0_millis+0x3>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
 1f8:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <timer0_fract>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
 1fc:	23 e0       	ldi	r18, 0x03	; 3
 1fe:	23 0f       	add	r18, r19
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
 200:	2d 37       	cpi	r18, 0x7D	; 125
 202:	30 f0       	brcs	.+12     	; 0x210 <__vector_16+0x3e>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
 204:	26 e8       	ldi	r18, 0x86	; 134
 206:	23 0f       	add	r18, r19
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
 208:	02 96       	adiw	r24, 0x02	; 2
 20a:	a1 1d       	adc	r26, r1
 20c:	b1 1d       	adc	r27, r1
 20e:	03 c0       	rjmp	.+6      	; 0x216 <__vector_16+0x44>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:205
  }
  else {
    m += MILLIS_INC;
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	a1 1d       	adc	r26, r1
 214:	b1 1d       	adc	r27, r1
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:208
  }

  timer0_fract = f;
 216:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <timer0_fract>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
 21a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <timer0_millis>
 21e:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <timer0_millis+0x1>
 222:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <timer0_millis+0x2>
 226:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <timer0_millis+0x3>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
 22a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <timer0_overflow_count>
 22e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <timer0_overflow_count+0x1>
 232:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <timer0_overflow_count+0x2>
 236:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <timer0_overflow_count+0x3>
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	a1 1d       	adc	r26, r1
 23e:	b1 1d       	adc	r27, r1
 240:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <timer0_overflow_count>
 244:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <timer0_overflow_count+0x1>
 248:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <timer0_overflow_count+0x2>
 24c:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <timer0_overflow_count+0x3>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:213
#endif
}
 250:	bf 91       	pop	r27
 252:	af 91       	pop	r26
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	3f 91       	pop	r19
 25a:	2f 91       	pop	r18
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <__vector_12>:
__vector_12():
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:98
  ch=1;
  }
  
}

ISR(TIMER1_COMPB_vect){
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	8f 93       	push	r24
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:100
  
  PORTB &=B00000000;  //Write 0 on pin D3
 272:	85 b1       	in	r24, 0x05	; 5
 274:	15 b8       	out	0x05, r1	; 5
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:101
}
 276:	8f 91       	pop	r24
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <__vector_11>:
__vector_11():
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:61

}



ISR(TIMER1_COMPA_vect){
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
 290:	af 93       	push	r26
 292:	bf 93       	push	r27
 294:	ef 93       	push	r30
 296:	ff 93       	push	r31
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:62
  TCNT1=0;
 298:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 29c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:63
  OCR1B = (400)/16; //400 us pulse to start a channel
 2a0:	89 e1       	ldi	r24, 0x19	; 25
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 2a8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:64
  PORTB |=B00000010;//Write 1 on pin D3
 2ac:	29 9a       	sbi	0x05, 1	; 5
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:65
 switch (ch){
 2ae:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2b2:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2b6:	31 97       	sbiw	r30, 0x01	; 1
 2b8:	e7 30       	cpi	r30, 0x07	; 7
 2ba:	f1 05       	cpc	r31, r1
 2bc:	08 f0       	brcs	.+2      	; 0x2c0 <__vector_11+0x3e>
 2be:	44 c0       	rjmp	.+136    	; 0x348 <__vector_11+0xc6>
 2c0:	ec 5c       	subi	r30, 0xCC	; 204
 2c2:	ff 4f       	sbci	r31, 0xFF	; 255
 2c4:	0c 94 cb 02 	jmp	0x596	; 0x596 <__tablejump2__>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:67
  case 1:
  OCR1A=(ch1Value)/16;
 2c8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <ch1Value>
 2cc:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <ch1Value+0x1>
 2d0:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <ch1Value+0x2>
 2d4:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <ch1Value+0x3>
 2d8:	2c c0       	rjmp	.+88     	; 0x332 <__vector_11+0xb0>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:70
  break;
  case 2:
  OCR1A=(ch2Value)/16;
 2da:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <ch2Value>
 2de:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <ch2Value+0x1>
 2e2:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <ch2Value+0x2>
 2e6:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <ch2Value+0x3>
 2ea:	23 c0       	rjmp	.+70     	; 0x332 <__vector_11+0xb0>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:73
  break;
  case 3:
  OCR1A=(ch3Value)/16;
 2ec:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <ch3Value>
 2f0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <ch3Value+0x1>
 2f4:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <ch3Value+0x2>
 2f8:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <ch3Value+0x3>
 2fc:	1a c0       	rjmp	.+52     	; 0x332 <__vector_11+0xb0>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:76
  break;
  case 4:
  OCR1A=(ch4Value)/16;
 2fe:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ch4Value>
 302:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <ch4Value+0x1>
 306:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <ch4Value+0x2>
 30a:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <ch4Value+0x3>
 30e:	11 c0       	rjmp	.+34     	; 0x332 <__vector_11+0xb0>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:79
  break;
  case 5:
  OCR1A=(ch5Value)/16;
 310:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ch5Value>
 314:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ch5Value+0x1>
 318:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <ch5Value+0x2>
 31c:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <ch5Value+0x3>
 320:	08 c0       	rjmp	.+16     	; 0x332 <__vector_11+0xb0>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:85
  break;
  case 6:
  OCR1A=(ch6Value)/16;
  break;
  case 7:
  OCR1A=(ch6Value)/16;
 322:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 326:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 32a:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 32e:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 332:	e4 e0       	ldi	r30, 0x04	; 4
 334:	b6 95       	lsr	r27
 336:	a7 95       	ror	r26
 338:	97 95       	ror	r25
 33a:	87 95       	ror	r24
 33c:	ea 95       	dec	r30
 33e:	d1 f7       	brne	.-12     	; 0x334 <__vector_11+0xb2>
 340:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 344:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:89
  break;
  
  }  
 ch=ch+1;
 348:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 34c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 356:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:90
 if(ch>7){
 35a:	08 97       	sbiw	r24, 0x08	; 8
 35c:	84 f0       	brlt	.+32     	; 0x37e <__vector_11+0xfc>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:91
  TCNT1=0;
 35e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 362:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:92
  OCR1A=(10.5*1000)/16; //10.5 milli sec pulse for next data frame
 366:	80 e9       	ldi	r24, 0x90	; 144
 368:	92 e0       	ldi	r25, 0x02	; 2
 36a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 36e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:93
  ch=1;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 37a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:96
  }
  
}
 37e:	ff 91       	pop	r31
 380:	ef 91       	pop	r30
 382:	bf 91       	pop	r27
 384:	af 91       	pop	r26
 386:	9f 91       	pop	r25
 388:	8f 91       	pop	r24
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <countPulseASM>:
countPulseASM():
 394:	cf 92       	push	r12
 396:	df 92       	push	r13
 398:	ef 92       	push	r14
 39a:	ff 92       	push	r15
 39c:	0f 93       	push	r16
 39e:	1f 93       	push	r17
 3a0:	e8 2f       	mov	r30, r24
 3a2:	f9 2f       	mov	r31, r25
 3a4:	05 c0       	rjmp	.+10     	; 0x3b0 <countPulseASM+0x1c>
 3a6:	01 50       	subi	r16, 0x01	; 1
 3a8:	11 09       	sbc	r17, r1
 3aa:	21 09       	sbc	r18, r1
 3ac:	31 09       	sbc	r19, r1
 3ae:	61 f1       	breq	.+88     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3b0:	90 81       	ld	r25, Z
 3b2:	96 23       	and	r25, r22
 3b4:	94 17       	cp	r25, r20
 3b6:	b9 f3       	breq	.-18     	; 0x3a6 <countPulseASM+0x12>
 3b8:	05 c0       	rjmp	.+10     	; 0x3c4 <countPulseASM+0x30>
 3ba:	01 50       	subi	r16, 0x01	; 1
 3bc:	11 09       	sbc	r17, r1
 3be:	21 09       	sbc	r18, r1
 3c0:	31 09       	sbc	r19, r1
 3c2:	11 f1       	breq	.+68     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3c4:	90 81       	ld	r25, Z
 3c6:	96 23       	and	r25, r22
 3c8:	94 13       	cpse	r25, r20
 3ca:	f7 cf       	rjmp	.-18     	; 0x3ba <countPulseASM+0x26>
 3cc:	c1 2c       	mov	r12, r1
 3ce:	d1 2c       	mov	r13, r1
 3d0:	e1 2c       	mov	r14, r1
 3d2:	f1 2c       	mov	r15, r1
 3d4:	0a c0       	rjmp	.+20     	; 0x3ea <countPulseASM+0x56>
 3d6:	8f ef       	ldi	r24, 0xFF	; 255
 3d8:	c8 1a       	sub	r12, r24
 3da:	d8 0a       	sbc	r13, r24
 3dc:	e8 0a       	sbc	r14, r24
 3de:	f8 0a       	sbc	r15, r24
 3e0:	0c 15       	cp	r16, r12
 3e2:	1d 05       	cpc	r17, r13
 3e4:	2e 05       	cpc	r18, r14
 3e6:	3f 05       	cpc	r19, r15
 3e8:	79 f0       	breq	.+30     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3ea:	80 81       	ld	r24, Z
 3ec:	86 23       	and	r24, r22
 3ee:	84 17       	cp	r24, r20
 3f0:	91 f3       	breq	.-28     	; 0x3d6 <countPulseASM+0x42>
 3f2:	6c 2d       	mov	r22, r12
 3f4:	7d 2d       	mov	r23, r13
 3f6:	8e 2d       	mov	r24, r14
 3f8:	9f 2d       	mov	r25, r15
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	df 90       	pop	r13
 404:	cf 90       	pop	r12
 406:	08 95       	ret
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	70 e0       	ldi	r23, 0x00	; 0
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	ff 90       	pop	r15
 416:	ef 90       	pop	r14
 418:	df 90       	pop	r13
 41a:	cf 90       	pop	r12
 41c:	08 95       	ret

0000041e <main>:
main():
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
 41e:	78 94       	sei
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
 420:	84 b5       	in	r24, 0x24	; 36
 422:	83 60       	ori	r24, 0x03	; 3
 424:	84 bd       	out	0x24, r24	; 36
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
 426:	85 b5       	in	r24, 0x25	; 37
 428:	83 60       	ori	r24, 0x03	; 3
 42a:	85 bd       	out	0x25, r24	; 37
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
 42c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 430:	81 60       	ori	r24, 0x01	; 1
 432:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
 43c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 440:	81 60       	ori	r24, 0x01	; 1
 442:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
 446:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 44a:	81 60       	ori	r24, 0x01	; 1
 44c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
 450:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 454:	84 60       	ori	r24, 0x04	; 4
 456:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
 45a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 45e:	81 60       	ori	r24, 0x01	; 1
 460:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
 464:	87 e8       	ldi	r24, 0x87	; 135
 466:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
 46a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:18
unsigned long ch5Value;
unsigned long ch6Value;
void setup() {
 
   //Serial.begin(115200);
   pinMode(9,OUTPUT);
 46e:	61 e0       	ldi	r22, 0x01	; 1
 470:	89 e0       	ldi	r24, 0x09	; 9
 472:	0e 94 80 00 	call	0x100	; 0x100 <pinMode>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:20
   
   pinMode(Ich1,INPUT);
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	82 e0       	ldi	r24, 0x02	; 2
 47a:	0e 94 80 00 	call	0x100	; 0x100 <pinMode>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:21
   pinMode(Ich2,INPUT);
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	84 e0       	ldi	r24, 0x04	; 4
 482:	0e 94 80 00 	call	0x100	; 0x100 <pinMode>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:22
   pinMode(Ich3,INPUT);
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	87 e0       	ldi	r24, 0x07	; 7
 48a:	0e 94 80 00 	call	0x100	; 0x100 <pinMode>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:23
   pinMode(Ich4,INPUT);
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	88 e0       	ldi	r24, 0x08	; 8
 492:	0e 94 80 00 	call	0x100	; 0x100 <pinMode>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:24
   pinMode(Ich5,INPUT);
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	8c e0       	ldi	r24, 0x0C	; 12
 49a:	0e 94 80 00 	call	0x100	; 0x100 <pinMode>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:25
   pinMode(Ich6,INPUT);
 49e:	60 e0       	ldi	r22, 0x00	; 0
 4a0:	8d e0       	ldi	r24, 0x0D	; 13
 4a2:	0e 94 80 00 	call	0x100	; 0x100 <pinMode>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:28


   pinMode(A4,OUTPUT);
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	82 e1       	ldi	r24, 0x12	; 18
 4aa:	0e 94 80 00 	call	0x100	; 0x100 <pinMode>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:29
   cli();                      //stop interrupts for till we make the settings 
 4ae:	f8 94       	cli
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:31
  
  TCCR1A = 0;                 // Reset entire TCCR1A to 0 
 4b0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:32
  TCCR1B = 0;                 // Reset entire TCCR1B to 0
 4b4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:33
  TCCR1B |= B00000100;        //Set CS12 to 1 so we get prescalar 256  
 4b8:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 4bc:	84 60       	ori	r24, 0x04	; 4
 4be:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:34
  TIMSK1 |= B00000110;        //Set OCIE1A and OCIE1B to 1 -> compare match A and B
 4c2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 4c6:	86 60       	ori	r24, 0x06	; 6
 4c8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:35
  sei();                      //Enable back the interrupts  
 4cc:	78 94       	sei
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:37
                    
  OCR1A=(10.5*1000)/16;       //set ocrc1a to 10.5 millisec compare A match
 4ce:	80 e9       	ldi	r24, 0x90	; 144
 4d0:	92 e0       	ldi	r25, 0x02	; 2
 4d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 4d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
 4da:	c0 e0       	ldi	r28, 0x00	; 0
 4dc:	d0 e0       	ldi	r29, 0x00	; 0
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:48
  PORTC |= B00010000;
  led=0; 
}else{
  
PORTC &= B00000000; 
  led=1;
 4de:	01 e0       	ldi	r16, 0x01	; 1
 4e0:	10 e0       	ldi	r17, 0x00	; 0
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:42
  OCR1A=(10.5*1000)/16;       //set ocrc1a to 10.5 millisec compare A match

}

void loop() {
if(led==1){
 4e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <led>
 4e6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <led+0x1>
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	31 f4       	brne	.+12     	; 0x4fa <main+0xdc>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:43
  PORTC |= B00010000;
 4ee:	44 9a       	sbi	0x08, 4	; 8
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:44
  led=0; 
 4f0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <led+0x1>
 4f4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <led>
 4f8:	06 c0       	rjmp	.+12     	; 0x506 <main+0xe8>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:47
}else{
  
PORTC &= B00000000; 
 4fa:	88 b1       	in	r24, 0x08	; 8
 4fc:	18 b8       	out	0x08, r1	; 8
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:48
  led=1;
 4fe:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <led+0x1>
 502:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <led>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:50
  }
ch1Value= pulseIn(Ich1,HIGH);
 506:	82 e0       	ldi	r24, 0x02	; 2
 508:	0e 94 bc 00 	call	0x178	; 0x178 <pulseIn.constprop.0>
 50c:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <ch1Value>
 510:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <ch1Value+0x1>
 514:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <ch1Value+0x2>
 518:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <ch1Value+0x3>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:51
ch2Value= pulseIn(Ich2,HIGH);
 51c:	84 e0       	ldi	r24, 0x04	; 4
 51e:	0e 94 bc 00 	call	0x178	; 0x178 <pulseIn.constprop.0>
 522:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <ch2Value>
 526:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <ch2Value+0x1>
 52a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <ch2Value+0x2>
 52e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <ch2Value+0x3>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:52
ch3Value= pulseIn(Ich3,HIGH);
 532:	87 e0       	ldi	r24, 0x07	; 7
 534:	0e 94 bc 00 	call	0x178	; 0x178 <pulseIn.constprop.0>
 538:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <ch3Value>
 53c:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <ch3Value+0x1>
 540:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ch3Value+0x2>
 544:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <ch3Value+0x3>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:53
ch4Value= pulseIn(Ich4,HIGH);
 548:	88 e0       	ldi	r24, 0x08	; 8
 54a:	0e 94 bc 00 	call	0x178	; 0x178 <pulseIn.constprop.0>
 54e:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <ch4Value>
 552:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <ch4Value+0x1>
 556:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ch4Value+0x2>
 55a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <ch4Value+0x3>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:54
ch5Value= pulseIn(Ich5,HIGH);
 55e:	8c e0       	ldi	r24, 0x0C	; 12
 560:	0e 94 bc 00 	call	0x178	; 0x178 <pulseIn.constprop.0>
 564:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <ch5Value>
 568:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <ch5Value+0x1>
 56c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ch5Value+0x2>
 570:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <ch5Value+0x3>
/home/kaalx/Arduino/SignalConverter/SignalConverter.ino:55
ch6Value= pulseIn(Ich6,HIGH);
 574:	8d e0       	ldi	r24, 0x0D	; 13
 576:	0e 94 bc 00 	call	0x178	; 0x178 <pulseIn.constprop.0>
 57a:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 57e:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 582:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 586:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
/home/kaalx/.arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/main.cpp:47
 58a:	20 97       	sbiw	r28, 0x00	; 0
 58c:	09 f4       	brne	.+2      	; 0x590 <main+0x172>
 58e:	a9 cf       	rjmp	.-174    	; 0x4e2 <main+0xc4>
 590:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 594:	a6 cf       	rjmp	.-180    	; 0x4e2 <main+0xc4>

00000596 <__tablejump2__>:
 596:	ee 0f       	add	r30, r30
 598:	ff 1f       	adc	r31, r31
 59a:	05 90       	lpm	r0, Z+
 59c:	f4 91       	lpm	r31, Z
 59e:	e0 2d       	mov	r30, r0
 5a0:	09 94       	ijmp

000005a2 <_exit>:
 5a2:	f8 94       	cli

000005a4 <__stop_program>:
 5a4:	ff cf       	rjmp	.-2      	; 0x5a4 <__stop_program>
